//! Method, error and parameter types for the Users endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct UsersClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for UsersCreateUserParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersCreateUserContactMethodParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersCreateUserNotificationRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersCreateUserNotificationSubscriptionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersCreateUserStatusUpdateNotificationRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersDeleteUserParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersDeleteUserContactMethodParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersDeleteUserNotificationRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersDeleteUserSessionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersDeleteUserSessionsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersDeleteUserStatusUpdateNotificationRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get the current user](Users::get_current_user()) endpoint.
#[derive(Default, Serialize)]
pub struct UsersGetCurrentUserParams<'req> {
    pub(crate) qs: String,
}

pub struct UsersGetCurrentUserParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> UsersGetCurrentUserParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for UsersGetCurrentUserParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get a user](Users::get_user()) endpoint.
#[derive(Default, Serialize)]
pub struct UsersGetUserParams<'req> {
    pub(crate) qs: String,
}

pub struct UsersGetUserParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> UsersGetUserParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for UsersGetUserParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersGetUserContactMethodParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersGetUserContactMethodsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get a user&#x27;s notification rule](Users::get_user_notification_rule()) endpoint.
#[derive(Default, Serialize)]
pub struct UsersGetUserNotificationRuleParams<'req> {
    pub(crate) qs: String,
}

pub struct UsersGetUserNotificationRuleParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> UsersGetUserNotificationRuleParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for UsersGetUserNotificationRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List a user&#x27;s notification rules](Users::get_user_notification_rules()) endpoint.
#[derive(Default, Serialize)]
pub struct UsersGetUserNotificationRulesParams<'req> {
    pub(crate) qs: String,
}

pub struct UsersGetUserNotificationRulesParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> UsersGetUserNotificationRulesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for UsersGetUserNotificationRulesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersGetUserNotificationSubscriptionsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersGetUserSessionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersGetUserSessionsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get a user&#x27;s status update notification rule](Users::get_user_status_update_notification_rule()) endpoint.
#[derive(Default, Serialize)]
pub struct UsersGetUserStatusUpdateNotificationRuleParams<'req> {
    pub(crate) qs: String,
}

pub struct UsersGetUserStatusUpdateNotificationRuleParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> UsersGetUserStatusUpdateNotificationRuleParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for UsersGetUserStatusUpdateNotificationRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List a user&#x27;s status update notification rules](Users::get_user_status_update_notification_rules()) endpoint.
#[derive(Default, Serialize)]
pub struct UsersGetUserStatusUpdateNotificationRulesParams<'req> {
    pub(crate) qs: String,
}

pub struct UsersGetUserStatusUpdateNotificationRulesParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> UsersGetUserStatusUpdateNotificationRulesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for UsersGetUserStatusUpdateNotificationRulesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List users](Users::list_users()) endpoint.
#[derive(Default, Serialize)]
pub struct UsersListUsersParams<'req> {
    pub(crate) qs: String,
}

pub struct UsersListUsersParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> UsersListUsersParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Filters the result, showing only the users whose names or email addresses match the query.
    pub fn query(&mut self, query: &'req str) -> &mut Self {
        self.qs.append_pair("query", serde_urlencoded::to_string(query));

        self
    }

    /// An array of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
    pub fn team_ids<I: IntoIterator<Item = &'req str>>(&mut self, team_ids: I) -> &mut Self {
        for item in team_ids {
            self.qs.append_pair("team_ids[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for UsersListUsersParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersListUsersAuditRecordsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersUnsubscribeUserNotificationSubscriptionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersUpdateUserParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersUpdateUserContactMethodParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersUpdateUserNotificationRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for UsersUpdateUserStatusUpdateNotificationRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl UsersClient {
    /// ---
    ///
    /// # Create a user
    ///
    /// Create a new user. Note that you must also supply a `password` property to create a user--it will not be returned by any API.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn create_user(&self, body: User) -> Result<UsersBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(User)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create a user contact method
    ///
    /// Create a new contact method for the User.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn create_user_contact_method(&self, id: &str, body: UserContactMethod) -> Result<UserContactMethodResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(UserContactMethod)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create a user notification rule
    ///
    /// Create a new notification rule.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn create_user_notification_rule(&self, id: &str, body: UserNotificationRule) -> Result<IdNotificationRulesBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(UserNotificationRule)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create notification subcription
    ///
    /// Create a new Notification Subscription for the given user.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// ---
    pub async fn create_user_notification_subscription(&self, id: &str, body: UserNotificationSubscription) -> Result<UserNotificationSubscriptionResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(UserNotificationSubscription)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create a user status update notification rule
    ///
    /// Create a new status update notification rule.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn create_user_status_update_notification_rule(&self, id: &str, body: UserStatusUpdateNotificationRule) -> Result<UserStatusUpdateNotificationRuleResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(UserStatusUpdateNotificationRule)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a user
    ///
    /// Remove an existing user.
    /// 
    /// Returns 400 if the user has assigned incidents unless your [pricing plan](https://support.pagerduty.com/docs/offboarding) has the `offboarding` feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.
    /// 
    /// Note that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.
    /// 
    /// [*Learn more about `offboarding` feature*](https://support.pagerduty.com/docs/offboarding).
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn delete_user(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a user&#x27;s contact method
    ///
    /// Remove a user's contact method.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn delete_user_contact_method(&self, id: &str, contact_method_id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&contact_method_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a user&#x27;s notification rule
    ///
    /// Remove a user's notification rule.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn delete_user_notification_rule(&self, id: &str, notification_rule_id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&notification_rule_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a user&#x27;s session
    ///
    /// Delete a user's session.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn delete_user_session(&self, id: &str, _type: &str, session_id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&_type&session_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete all user sessions
    ///
    /// Delete all user sessions.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn delete_user_sessions(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a user&#x27;s status update notification rule
    ///
    /// Remove a user's status update notification rule.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn delete_user_status_update_notification_rule(&self, id: &str, status_update_notification_rule_id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&status_update_notification_rule_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get the current user
    ///
    /// Get details about the current user. 
    /// 
    /// This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_current_user(&self, query_params: UsersGetCurrentUserParams) -> Result<UsersIdBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), UsersGetCurrentUserParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a user
    ///
    /// Get details about an existing user.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user(&self, id: &str, query_params: UsersGetUserParams) -> Result<UsersBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), UsersGetUserParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a user&#x27;s contact method
    ///
    /// Get details about a User's contact method.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user_contact_method(&self, id: &str, contact_method_id: &str) -> Result<UserContactMethodResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&contact_method_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List a user&#x27;s contact methods
    ///
    /// List contact methods of your PagerDuty user.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user_contact_methods(&self, id: &str) -> Result<GetUserContactMethodsResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a user&#x27;s notification rule
    ///
    /// Get details about a user's notification rule.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user_notification_rule(&self, id: &str, notification_rule_id: &str, query_params: UsersGetUserNotificationRuleParams) -> Result<IdNotificationRulesBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&notification_rule_id), UsersGetUserNotificationRuleParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List a user&#x27;s notification rules
    ///
    /// List notification rules of your PagerDuty user.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user_notification_rules(&self, id: &str, query_params: UsersGetUserNotificationRulesParams) -> Result<GetUserNotificationRulesResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), UsersGetUserNotificationRulesParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List notification subscriptions
    ///
    /// Retrieve a list of Notification Subscriptions the given user has.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// 
    /// ---
    pub async fn get_user_notification_subscriptions(&self, id: &str) -> Result<GetUserNotificationSubscriptionsResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a user&#x27;s session
    ///
    /// Get details about a user's session.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user_session(&self, id: &str, _type: &str, session_id: &str) -> Result<GetUserSessionResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&_type&session_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List a user&#x27;s active sessions
    ///
    /// List active sessions of a PagerDuty user.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user_sessions(&self, id: &str) -> Result<GetUserSessionsResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a user&#x27;s status update notification rule
    ///
    /// Get details about a user's status update notification rule.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user_status_update_notification_rule(&self, id: &str, status_update_notification_rule_id: &str, query_params: UsersGetUserStatusUpdateNotificationRuleParams) -> Result<GetUserStatusUpdateNotificationRuleResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&status_update_notification_rule_id), UsersGetUserStatusUpdateNotificationRuleParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List a user&#x27;s status update notification rules
    ///
    /// List status update notification rules of your PagerDuty user.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn get_user_status_update_notification_rules(&self, id: &str, query_params: UsersGetUserStatusUpdateNotificationRulesParams) -> Result<GetUserStatusUpdateNotificationRulesResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), UsersGetUserStatusUpdateNotificationRulesParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List users
    ///
    /// List users of your PagerDuty account, optionally filtered by a search query.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub fn list_users(&self, query_params: UsersListUsersParams) -> impl Stream<Item = Result<User, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(UsersListUsersParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<UsersResponse, >
    }

    /// ---
    ///
    /// # List audit records for a user
    ///
    /// The response will include audit records with changes that are made to the identified user not changes made by the identified user.
    /// 
    /// 
    /// The returned records are sorted by the `execution_time` from newest to oldest.
    /// 
    /// See [`Cursor-based pagination`](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#audit-record).
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint's interface is under development and subject to change. Do not use it in production systems.
    /// > Your request must set an X-EARLY-ACCESS header with value `audit-early-access` to acknowledge this.
    /// >
    /// > Audit records for user and team resources started in August 2020 and records may be purged while the API is in early access.
    /// 
    /// 
    /// ---
    pub async fn list_users_audit_records(&self, id: &str) -> Result<UsersAuditRecordsResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Remove notification subscription
    ///
    /// Unsubscribe the given User from Notifications on the matching subscribable entity.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// ---
    pub async fn unsubscribe_user_notification_subscription(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update a user
    ///
    /// Update an existing user. Note that you may also supply a `password` property--it will not be returned by any API.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn update_user(&self, id: &str, body: User) -> Result<UsersIdBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(User)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update a user&#x27;s contact method
    ///
    /// Update a User's contact method.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn update_user_contact_method(&self, id: &str, contact_method_id: &str, body: UserContactMethod) -> Result<UserContactMethodResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&contact_method_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(UserContactMethod)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update a user&#x27;s notification rule
    ///
    /// Update a user's notification rule.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn update_user_notification_rule(&self, id: &str, notification_rule_id: &str, body: UserNotificationRule) -> Result<UserNotificationRuleResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&notification_rule_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(UserNotificationRule)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update a user&#x27;s status update notification rule
    ///
    /// Update a user's status update notification rule.
    /// 
    /// Users are members of a PagerDuty account that have the ability to interact with Incidents and other data on the account.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#users)
    /// 
    /// 
    /// ---
    pub async fn update_user_status_update_notification_rule(&self, id: &str, status_update_notification_rule_id: &str, body: UserStatusNotificationRule) -> Result<UserStatusNotificationRuleResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&status_update_notification_rule_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(UserStatusNotificationRule)?));


        self.client
            .process_into_value(req)
            .await
    }

}
