//! Method, error and parameter types for the BusinessServices endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct BusinessServicesClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for BusinessServicesCreateBusinessServiceParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for BusinessServicesDeleteBusinessServiceParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for BusinessServicesGetBusinessServiceParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List business services](BusinessServices::list_business_services()) endpoint.
#[derive(Default, Serialize)]
pub struct BusinessServicesListBusinessServicesParams<'req> {
    pub(crate) qs: String,
}

pub struct BusinessServicesListBusinessServicesParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> BusinessServicesListBusinessServicesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Offset to start pagination search results.
    pub fn offset(&mut self, offset: i32) -> &mut Self {
        self.qs.append_pair("offset", serde_urlencoded::to_string(offset));

        self
    }

    /// Limit on number of results to load
    pub fn limit(&mut self, limit: i32) -> &mut Self {
        self.qs.append_pair("limit", serde_urlencoded::to_string(limit));

        self
    }
}


impl BaseOption for BusinessServicesListBusinessServicesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for BusinessServicesUpdateBusinessServiceParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BusinessServicesClient {
    /// ---
    ///
    /// # Create a business service
    ///
    /// Create a new business service.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn create_business_service(&self, body: BusinessService) -> Result<BusinessServiceResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(BusinessService)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a business service
    ///
    /// Delete an existing business service. 
    /// 
    /// Once the service is deleted, it will not be accessible from the web UI and new incidents won't be able to be created for this service.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn delete_business_service(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a business service
    ///
    /// Get details about an existing business service.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn get_business_service(&self, id: &str) -> Result<BusinessServiceResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List business services
    ///
    /// List existing business services.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub fn list_business_services(&self, query_params: BusinessServicesListBusinessServicesParams) -> impl Stream<Item = Result<BusinessService, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(BusinessServicesListBusinessServicesParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<BusinessServicesResponse, >
    }

    /// ---
    ///
    /// # Update a business service
    ///
    /// Update an existing business service. NOTE that this endpoint also accepts the PATCH verb.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn update_business_service(&self, id: &str, body: BusinessService) -> Result<BusinessServiceResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(BusinessService)?));


        self.client
            .process_into_value(req)
            .await
    }

}
