//! Method, error and parameter types for the AddOns endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct AddOnsClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for AddOnsCreateAddonParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for AddOnsDeleteAddonParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for AddOnsGetAddonParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List installed Add-ons](AddOns::list_addon()) endpoint.
#[derive(Default, Serialize)]
pub struct AddOnsListAddonParams<'req> {
    pub(crate) qs: String,
}

pub struct AddOnsListAddonParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> AddOnsListAddonParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// Filters the results, showing only Add-ons for the given services
    pub fn service_ids<I: IntoIterator<Item = &'req str>>(&mut self, service_ids: I) -> &mut Self {
        for item in service_ids {
            self.qs.append_pair("service_ids[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// Filters the results, showing only Add-ons of the given type
    pub fn filter(&mut self, filter: &'req str) -> &mut Self {
        self.qs.append_pair("filter", serde_urlencoded::to_string(filter));

        self
    }
}


impl BaseOption for AddOnsListAddonParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for AddOnsUpdateAddonParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl AddOnsClient {
    /// ---
    ///
    /// # Install an Add-on
    ///
    /// Install an Add-on for your account.
    /// 
    /// Addon's are pieces of functionality that developers can write to insert new functionality into PagerDuty's UI.
    /// 
    /// Given a configuration containing a `src` parameter, that URL will be embedded in an `iframe` on a page that's available to users from a drop-down menu.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#add-ons)
    /// 
    /// 
    /// ---
    pub async fn create_addon(&self, body: Addon) -> Result<AddonResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(Addon)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete an Add-on
    ///
    /// Remove an existing Add-on.
    /// 
    /// Addon's are pieces of functionality that developers can write to insert new functionality into PagerDuty's UI.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#add-ons)
    /// 
    /// 
    /// ---
    pub async fn delete_addon(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get an Add-on
    ///
    /// Get details about an existing Add-on.
    /// 
    /// Addon's are pieces of functionality that developers can write to insert new functionality into PagerDuty's UI.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#add-ons)
    /// 
    /// 
    /// ---
    pub async fn get_addon(&self, id: &str) -> Result<AddonsBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List installed Add-ons
    ///
    /// List all of the Add-ons installed on your account.
    /// 
    /// Addon's are pieces of functionality that developers can write to insert new functionality into PagerDuty's UI.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#add-ons)
    /// 
    /// 
    /// ---
    pub fn list_addon(&self, query_params: AddOnsListAddonParams) -> impl Stream<Item = Result<AddonReference, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(AddOnsListAddonParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<AddonResponse, >
    }

    /// ---
    ///
    /// # Update an Add-on
    ///
    /// Update an existing Add-on.
    /// 
    /// Addon's are pieces of functionality that developers can write to insert new functionality into PagerDuty's UI.
    /// 
    /// Given a configuration containing a `src` parameter, that URL will be embedded in an `iframe` on a page that's available to users from a drop-down menu.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#add-ons)
    /// 
    /// 
    /// ---
    pub async fn update_addon(&self, id: &str, body: Addon) -> Result<AddonsIdBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(Addon)?));


        self.client
            .process_into_value(req)
            .await
    }

}
