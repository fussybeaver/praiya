//! Method, error and parameter types for the MaintenanceWindows endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct MaintenanceWindowsClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for MaintenanceWindowsCreateMaintenanceWindowParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for MaintenanceWindowsDeleteMaintenanceWindowParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get a maintenance window](MaintenanceWindows::get_maintenance_window()) endpoint.
#[derive(Default, Serialize)]
pub struct MaintenanceWindowsGetMaintenanceWindowParams<'req> {
    pub(crate) qs: String,
}

pub struct MaintenanceWindowsGetMaintenanceWindowParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> MaintenanceWindowsGetMaintenanceWindowParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for MaintenanceWindowsGetMaintenanceWindowParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List maintenance windows](MaintenanceWindows::list_maintenance_windows()) endpoint.
#[derive(Default, Serialize)]
pub struct MaintenanceWindowsListMaintenanceWindowsParams<'req> {
    pub(crate) qs: String,
}

pub struct MaintenanceWindowsListMaintenanceWindowsParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> MaintenanceWindowsListMaintenanceWindowsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// An array of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
    pub fn team_ids<I: IntoIterator<Item = &'req str>>(&mut self, team_ids: I) -> &mut Self {
        for item in team_ids {
            self.qs.append_pair("team_ids[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// An array of service IDs. Only results related to these services will be returned.
    pub fn service_ids<I: IntoIterator<Item = &'req str>>(&mut self, service_ids: I) -> &mut Self {
        for item in service_ids {
            self.qs.append_pair("service_ids[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// Only return maintenance windows in a given state.
    pub fn filter(&mut self, filter: &'req str) -> &mut Self {
        self.qs.append_pair("filter", serde_urlencoded::to_string(filter));

        self
    }

    /// Filters the results, showing only the maintenance windows whose descriptions contain the query.
    pub fn query(&mut self, query: &'req str) -> &mut Self {
        self.qs.append_pair("query", serde_urlencoded::to_string(query));

        self
    }
}


impl BaseOption for MaintenanceWindowsListMaintenanceWindowsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for MaintenanceWindowsUpdateMaintenanceWindowParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl MaintenanceWindowsClient {
    /// ---
    ///
    /// # Create a maintenance window
    ///
    /// Create a new maintenance window for the specified services. No new incidents will be created for a service that is in maintenance.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub async fn create_maintenance_window(&self, body: MaintenanceWindow) -> Result<MaintenanceWindowsBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(MaintenanceWindow)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete or end a maintenance window
    ///
    /// Delete an existing maintenance window if it's in the future, or end it if it's currently on-going. If the maintenance window has already ended it cannot be deleted.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub async fn delete_maintenance_window(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a maintenance window
    ///
    /// Get an existing maintenance window.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub async fn get_maintenance_window(&self, id: &str, query_params: MaintenanceWindowsGetMaintenanceWindowParams) -> Result<MaintenanceWindowsBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), MaintenanceWindowsGetMaintenanceWindowParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List maintenance windows
    ///
    /// List existing maintenance windows, optionally filtered by service and/or team, or whether they are from the past, present or future.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub fn list_maintenance_windows(&self, query_params: MaintenanceWindowsListMaintenanceWindowsParams) -> impl Stream<Item = Result<MaintenanceWindow, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(MaintenanceWindowsListMaintenanceWindowsParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<MaintenanceWindowsResponse, >
    }

    /// ---
    ///
    /// # Update a maintenance window
    ///
    /// Update an existing maintenance window.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub async fn update_maintenance_window(&self, id: &str, body: MaintenanceWindow) -> Result<MaintenanceWindowsIdBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(MaintenanceWindow)?));


        self.client
            .process_into_value(req)
            .await
    }

}
