//! Method, error and parameter types for the MaintenanceWindows endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct MaintenanceWindowsClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}


/// Query parameters for the [Get a maintenance window](MaintenanceWindows::get_maintenance_window()) endpoint.
#[derive(Default, Serialize)]
pub struct MaintenanceWindowsGetMaintenanceWindowParams {
    pub(crate) qs: String,
}

pub struct MaintenanceWindowsGetMaintenanceWindowParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> MaintenanceWindowsGetMaintenanceWindowParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }

    pub fn build(&mut self) -> MaintenanceWindowsGetMaintenanceWindowParams {
        MaintenanceWindowsGetMaintenanceWindowParams {
            qs: self.qs.finish(),
        }
    }
}

impl BaseOption for MaintenanceWindowsGetMaintenanceWindowParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineListResponse20027 {
    pub offset: usize,
    pub more: bool,
    pub limit: usize,
    pub total: Option<u64>,
    pub inline20027: Vec<MaintenanceWindow>,
}

/// Query parameters for the [List maintenance windows](MaintenanceWindows::list_maintenance_windows()) endpoint.
#[derive(Default, Serialize)]
pub struct MaintenanceWindowsListMaintenanceWindowsParams {
    pub(crate) qs: String,
}

pub struct MaintenanceWindowsListMaintenanceWindowsParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> MaintenanceWindowsListMaintenanceWindowsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// An array of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
    pub fn team_ids<I: IntoIterator<Item = &'req str>>(&mut self, team_ids: I) -> &mut Self {
        for item in team_ids {
            self.qs.append_pair("team_ids[]", &item);
        }
        self
    }

    /// An array of service IDs. Only results related to these services will be returned.
    pub fn service_ids<I: IntoIterator<Item = &'req str>>(&mut self, service_ids: I) -> &mut Self {
        for item in service_ids {
            self.qs.append_pair("service_ids[]", &item);
        }
        self
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }

    /// Only return maintenance windows in a given state.
    pub fn filter(&mut self, filter: &'req str) -> &mut Self {
        self.qs.append_pair("filter", &filter);

        self
    }

    /// Filters the results, showing only the maintenance windows whose descriptions contain the query.
    pub fn query(&mut self, query: &'req str) -> &mut Self {
        self.qs.append_pair("query", &query);

        self
    }

    pub fn build(&mut self) -> MaintenanceWindowsListMaintenanceWindowsParams {
        MaintenanceWindowsListMaintenanceWindowsParams {
            qs: self.qs.finish(),
        }
    }
}

impl BaseOption for MaintenanceWindowsListMaintenanceWindowsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl MaintenanceWindowsClient {
    /// ---
    ///
    /// # Create a maintenance window
    ///
    /// Create a new maintenance window for the specified services. No new incidents will be created for a service that is in maintenance.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub async fn create_maintenance_window(&self, body: CreateMaintenanceWindow) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, "/maintenance_windows", "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, MaintenanceWindowsCreateMaintenanceWindowResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Delete or end a maintenance window
    ///
    /// Delete an existing maintenance window if it's in the future, or end it if it's currently on-going. If the maintenance window has already ended it cannot be deleted.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub async fn delete_maintenance_window(&self, id: &str) -> Result<(), Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/maintenance_windows/{}", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value::<, MaintenanceWindowsDeleteMaintenanceWindowResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Get a maintenance window
    ///
    /// Get an existing maintenance window.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub async fn get_maintenance_window(&self, id: &str, query_params: MaintenanceWindowsGetMaintenanceWindowParams) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/maintenance_windows/{}", &id), &MaintenanceWindowsGetMaintenanceWindowParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, MaintenanceWindowsGetMaintenanceWindowResponse>(req)
            .await
    }

    /// ---
    ///
    /// # List maintenance windows
    ///
    /// List existing maintenance windows, optionally filtered by service and/or team, or whether they are from the past, present or future.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub fn list_maintenance_windows(&self, query_params: MaintenanceWindowsListMaintenanceWindowsParams) -> impl Stream<Item = Result<MaintenanceWindow, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(MaintenanceWindowsListMaintenanceWindowsParamsBuilder::new().build()),
            path: String::from("/maintenance_windows"),
        };

        self.client
            .process_into_paginated_stream::<MaintenanceWindow, InlineListResponse20027>(
                base_request,
                PaginationQueryComponent {
                    offset: 0,
                    limit: DEFAULT_PAGERDUTY_API_LIMIT,
                },
            )
            .boxed()

    }

    /// ---
    ///
    /// # Update a maintenance window
    ///
    /// Update an existing maintenance window.
    /// 
    /// A Maintenance Window is used to temporarily disable one or more Services for a set period of time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#maintenance-windows)
    /// 
    /// 
    /// ---
    pub async fn update_maintenance_window(&self, id: &str, body: UpdateMaintenanceWindow) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/maintenance_windows/{}", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, MaintenanceWindowsUpdateMaintenanceWindowResponse>(req)
            .await
    }

}
