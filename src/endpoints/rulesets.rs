//! Method, error and parameter types for the Rulesets endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct RulesetsClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for RulesetsCreateRulesetParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for RulesetsCreateRulesetEventRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for RulesetsDeleteRulesetParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for RulesetsDeleteRulesetEventRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for RulesetsGetRulesetParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for RulesetsGetRulesetEventRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List event rules](Rulesets::list_ruleset_event_rules()) endpoint.
#[derive(Default, Serialize)]
pub struct RulesetsListRulesetEventRulesParams<'req> {
    pub(crate) qs: String,
}

pub struct RulesetsListRulesetEventRulesParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> RulesetsListRulesetEventRulesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}


impl BaseOption for RulesetsListRulesetEventRulesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List rulesets](Rulesets::list_rulesets()) endpoint.
#[derive(Default, Serialize)]
pub struct RulesetsListRulesetsParams<'req> {
    pub(crate) qs: String,
}

pub struct RulesetsListRulesetsParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> RulesetsListRulesetsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}


impl BaseOption for RulesetsListRulesetsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for RulesetsUpdateRulesetParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for RulesetsUpdateRulesetEventRuleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl RulesetsClient {
    /// ---
    ///
    /// # Create a ruleset
    ///
    /// Create a new ruleset.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub async fn create_ruleset(&self, body: Ruleset) -> Result<RulesetResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(Ruleset)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create an event rule
    ///
    /// Create a new event rule.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub async fn create_ruleset_event_rule(&self, id: &str, body: RulesetEventRule) -> Result<RulesetEventRuleResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(RulesetEventRule)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a ruleset
    ///
    /// Delete a ruleset.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub async fn delete_ruleset(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete an event rule
    ///
    /// Delete an event rule.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub async fn delete_ruleset_event_rule(&self, id: &str, rule_id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&rule_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a ruleset
    ///
    /// Get a ruleset.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub async fn get_ruleset(&self, id: &str) -> Result<RulesetResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get an event rule
    ///
    /// Get an event rule.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub async fn get_ruleset_event_rule(&self, id: &str, rule_id: &str) -> Result<RulesetEventRuleResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&rule_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List event rules
    ///
    /// List all event rules of a rulesets.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub fn list_ruleset_event_rules(&self, id: &str, query_params: RulesetsListRulesetEventRulesParams) -> impl Stream<Item = Result<Value, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(RulesetsListRulesetEventRulesParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<RulesetEventRulesResponse, >
    }

    /// ---
    ///
    /// # List rulesets
    ///
    /// List all rulesets.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub fn list_rulesets(&self, query_params: RulesetsListRulesetsParams) -> impl Stream<Item = Result<Value, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(RulesetsListRulesetsParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<RulesetsResponse, >
    }

    /// ---
    ///
    /// # Update a ruleset
    ///
    /// Update a ruleset.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub async fn update_ruleset(&self, id: &str, body: Ruleset) -> Result<RulesetResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(Ruleset)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update an event rule
    ///
    /// Update an event rule. Note that the endpoint supports partial updates, so any number of the writable fields can be provided.
    /// 
    /// Rulesets allow you to route events to an endpoint and create collections of event rules, which define sets of actions to take based on event content.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#rulesets)
    /// 
    /// 
    /// ---
    pub async fn update_ruleset_event_rule(&self, id: &str, rule_id: &str, body: RulesetEventRule) -> Result<RulesetEventRuleResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&rule_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(RulesetEventRule)?));


        self.client
            .process_into_value(req)
            .await
    }

}
