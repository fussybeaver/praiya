//! Method, error and parameter types for the Vendors endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct VendorsClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for VendorsGetVendorParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List vendors](Vendors::list_vendors()) endpoint.
#[derive(Default, Serialize)]
pub struct VendorsListVendorsParams<'req> {
    pub(crate) qs: String,
}

pub struct VendorsListVendorsParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> VendorsListVendorsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}


impl BaseOption for VendorsListVendorsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl VendorsClient {
    /// ---
    ///
    /// # Get a vendor
    ///
    /// Get details about one specific vendor.
    /// 
    /// A PagerDuty Vendor represents a specific type of integration. AWS Cloudwatch, Splunk, Datadog are all examples of vendors
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#vendors)
    /// 
    /// 
    /// ---
    pub async fn get_vendor(&self, id: &str) -> Result<GetVendorResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List vendors
    ///
    /// List all vendors.
    /// 
    /// A PagerDuty Vendor represents a specific type of integration. AWS Cloudwatch, Splunk, Datadog are all examples of vendors
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#vendors)
    /// 
    /// 
    /// ---
    pub fn list_vendors(&self, query_params: VendorsListVendorsParams) -> impl Stream<Item = Result<Vendor, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(VendorsListVendorsParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<VendorsResponse, >
    }

}
