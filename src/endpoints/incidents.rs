//! Method, error and parameter types for the Incidents endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct IncidentsClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateIncidentAlertsListResponse {
    pub offset: usize,
    pub more: bool,
    pub limit: usize,
    pub total: Option<u64>,
    pub update_incident_alerts: Vec<Alert>, //pub slack_connections: Vec<SlackConnection>
}

/// Query parameters for the [List alerts for an incident](Incidents::list_incident_alerts()) endpoint.
#[derive(Default, Serialize)]
pub struct IncidentsListIncidentAlertsParams {
    pub(crate) qs: String,
}

pub struct IncidentsListIncidentAlertsParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> IncidentsListIncidentAlertsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Return only alerts with the given statuses. (More status codes may be introduced in the future.)
    pub fn statuses<I: IntoIterator<Item = &'req str>>(&mut self, statuses: I) -> &mut Self {
        for item in statuses {
            self.qs.append_pair("statuses[]", &item);
        }
        self
    }

    /// Alert de-duplication key.
    pub fn alert_key(&mut self, alert_key: &'req str) -> &mut Self {
        self.qs.append_pair("alert_key", &alert_key);

        self
    }

    /// Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending.
    pub fn sort_by<I: IntoIterator<Item = &'req str>>(&mut self, sort_by: I) -> &mut Self {
        for item in sort_by {
            self.qs.append_pair("sort_by[]", &item);
        }
        self
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }
}

impl BaseOption for IncidentsListIncidentAlertsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct ListLogEntriesListResponse {
    pub offset: usize,
    pub more: bool,
    pub limit: usize,
    pub total: Option<u64>,
    pub list_log_entries: Vec<LogEntry>, //pub slack_connections: Vec<SlackConnection>
}

/// Query parameters for the [List log entries for an incident](Incidents::list_incident_log_entries()) endpoint.
#[derive(Default, Serialize)]
pub struct IncidentsListIncidentLogEntriesParams {
    pub(crate) qs: String,
}

pub struct IncidentsListIncidentLogEntriesParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> IncidentsListIncidentLogEntriesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Time zone in which dates in the result will be rendered.
    pub fn time_zone(&mut self, time_zone: &'req str) -> &mut Self {
        self.qs.append_pair("time_zone", &time_zone);

        self
    }

    /// The start of the date range over which you want to search.
    pub fn since(&mut self, since: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("since", &since);

        self
    }

    /// The end of the date range over which you want to search.
    pub fn until(&mut self, until: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("until", &until);

        self
    }

    /// If `true`, will return a subset of log entries that show only the most important changes to the incident.
    pub fn is_overview(&mut self, is_overview: bool) -> &mut Self {
        self.qs.append_pair("is_overview", &is_overview);

        self
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }
}

impl BaseOption for IncidentsListIncidentLogEntriesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateIncidentsListResponse {
    pub offset: usize,
    pub more: bool,
    pub limit: usize,
    pub total: Option<u64>,
    pub update_incidents: Vec<Incident>, //pub slack_connections: Vec<SlackConnection>
}

/// Query parameters for the [List incidents](Incidents::list_incidents()) endpoint.
#[derive(Default, Serialize)]
pub struct IncidentsListIncidentsParams {
    pub(crate) qs: String,
}

pub struct IncidentsListIncidentsParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> IncidentsListIncidentsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// The start of the date range over which you want to search.
    pub fn since(&mut self, since: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("since", &since);

        self
    }

    /// The end of the date range over which you want to search.
    pub fn until(&mut self, until: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("until", &until);

        self
    }

    /// When set to all, the since and until parameters and defaults are ignored.
    pub fn date_range(&mut self, date_range: &'req str) -> &mut Self {
        self.qs.append_pair("date_range", &date_range);

        self
    }

    /// Return only incidents with the given statuses. (More status codes may be introduced in the future.)
    pub fn statuses<I: IntoIterator<Item = &'req str>>(&mut self, statuses: I) -> &mut Self {
        for item in statuses {
            self.qs.append_pair("statuses[]", &item);
        }
        self
    }

    /// Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key.
    pub fn incident_key(&mut self, incident_key: &'req str) -> &mut Self {
        self.qs.append_pair("incident_key", &incident_key);

        self
    }

    /// Returns only the incidents associated with the passed service(s). This expects one or more service IDs.
    pub fn service_ids<I: IntoIterator<Item = &'req str>>(&mut self, service_ids: I) -> &mut Self {
        for item in service_ids {
            self.qs.append_pair("service_ids[]", &item);
        }
        self
    }

    /// An array of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
    pub fn team_ids<I: IntoIterator<Item = &'req str>>(&mut self, team_ids: I) -> &mut Self {
        for item in team_ids {
            self.qs.append_pair("team_ids[]", &item);
        }
        self
    }

    /// Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user.
    pub fn user_ids<I: IntoIterator<Item = &'req str>>(&mut self, user_ids: I) -> &mut Self {
        for item in user_ids {
            self.qs.append_pair("user_ids[]", &item);
        }
        self
    }

    /// Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the `urgencies` ability to do this.
    pub fn urgencies<I: IntoIterator<Item = &'req str>>(&mut self, urgencies: I) -> &mut Self {
        for item in urgencies {
            self.qs.append_pair("urgencies[]", &item);
        }
        self
    }

    /// Time zone in which dates in the result will be rendered.
    pub fn time_zone(&mut self, time_zone: &'req str) -> &mut Self {
        self.qs.append_pair("time_zone", &time_zone);

        self
    }

    /// Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the `urgencies` ability to sort by the urgency.
    pub fn sort_by<I: IntoIterator<Item = &'req str>>(&mut self, sort_by: I) -> &mut Self {
        for item in sort_by {
            self.qs.append_pair("sort_by[]", &item);
        }
        self
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }
}

impl BaseOption for IncidentsListIncidentsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Manage alerts](Incidents::update_incident_alerts()) endpoint.
#[derive(Default, Serialize)]
pub struct IncidentsUpdateIncidentAlertsParams {
    pub(crate) qs: String,
}

pub struct IncidentsUpdateIncidentAlertsParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> IncidentsUpdateIncidentAlertsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}

impl BaseOption for IncidentsUpdateIncidentAlertsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Manage incidents](Incidents::update_incidents()) endpoint.
#[derive(Default, Serialize)]
pub struct IncidentsUpdateIncidentsParams {
    pub(crate) qs: String,
}

pub struct IncidentsUpdateIncidentsParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> IncidentsUpdateIncidentsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}

impl BaseOption for IncidentsUpdateIncidentsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl IncidentsClient {
    /// ---
    ///
    /// # Create an Incident
    ///
    /// Create an incident synchronously without a corresponding event from a monitoring service.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn create_incident(&self, body: CreateIncidentBody) -> Result<GetIncidentResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(Praiya::serialize_payload(CreateIncidentBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create a note on an incident
    ///
    /// Create a new note for the specified incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn create_incident_note(&self, id: &str, body: CreateIncidentNoteBody) -> Result<IdNotesBody, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(Praiya::serialize_payload(CreateIncidentNoteBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Add notification subscriber
    ///
    /// Subscribe the given entity to Incident Status Update Notifications.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// ---
    pub async fn create_incident_notification_subscriber(&self, id: &str, body: CreateIncidentNotificationSubscriberBody) -> Result<CreateIncidentNotificationSubscriberResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(Praiya::serialize_payload(CreateIncidentNotificationSubscriberBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create a responder request for an incident
    ///
    /// Send a new responder request for the specified incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn create_incident_responder_request(&self, id: &str, body: CreateIncidentResponderRequestBody) -> Result<CreateIncidentResponderRequestResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(Praiya::serialize_payload(CreateIncidentResponderRequestBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Snooze an incident
    ///
    /// Snooze an incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn create_incident_snooze(&self, id: &str, body: CreateIncidentSnoozeBody) -> Result<GetIncidentResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(Praiya::serialize_payload(CreateIncidentSnoozeBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create a status update on an incident
    ///
    /// Create a new status update for the specified incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn create_incident_status_update(&self, id: &str, body: CreateIncidentStatusUpdateBody) -> Result<CreateIncidentStatusUpdateResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(Praiya::serialize_payload(CreateIncidentStatusUpdateBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get an incident
    ///
    /// Show detailed information about an incident. Accepts either an incident id, or an incident number.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn get_incident(&self, id: &str) -> Result<GetIncidentResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get an alert
    ///
    /// Show detailed information about an alert. Accepts an alert id.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn get_incident_alert(&self, id: &str, alert_id: &str) -> Result<GetIncidentAlertResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&alert_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List notification subscribers
    ///
    /// Retrieve a list of Notification Subscribers on the Incident.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// > Users must be added through `POST /incident/{id}/status_updates/subscribers` to be returned from this endpoint.
    /// 
    /// ---
    pub async fn get_incident_notification_subscribers(&self, id: &str) -> Result<GetIncidentNotificationSubscribersResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List alerts for an incident
    ///
    /// List alerts for the specified incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub fn list_incident_alerts(&self, id: &str, query_params: IncidentsListIncidentAlertsParams) -> impl Stream<Item = Result<Alert, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(IncidentsListIncidentAlertsParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<UpdateIncidentAlertsResponse, UpdateIncidentAlertsListResponse>(
                base_request,
                PaginationQueryComponent {
                    offset: 0,
                    limit: DEFAULT_PAGERDUTY_API_LIMIT,
                },
            )
            .boxed()

    }

    /// ---
    ///
    /// # List log entries for an incident
    ///
    /// List log entries for the specified incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// A Log Entry are a record of all events on your account.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub fn list_incident_log_entries(&self, id: &str, query_params: IncidentsListIncidentLogEntriesParams) -> impl Stream<Item = Result<LogEntry, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(IncidentsListIncidentLogEntriesParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<ListLogEntriesResponse, ListLogEntriesListResponse>(
                base_request,
                PaginationQueryComponent {
                    offset: 0,
                    limit: DEFAULT_PAGERDUTY_API_LIMIT,
                },
            )
            .boxed()

    }

    /// ---
    ///
    /// # List notes for an incident
    ///
    /// List existing notes for the specified incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn list_incident_notes(&self, id: &str) -> Result<ListIncidentNotesResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List incidents
    ///
    /// List existing incidents.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub fn list_incidents(&self, query_params: IncidentsListIncidentsParams) -> impl Stream<Item = Result<Incident, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(IncidentsListIncidentsParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<UpdateIncidentsResponse, UpdateIncidentsListResponse>(
                base_request,
                PaginationQueryComponent {
                    offset: 0,
                    limit: DEFAULT_PAGERDUTY_API_LIMIT,
                },
            )
            .boxed()

    }

    /// ---
    ///
    /// # Merge incidents
    ///
    /// Merge a list of source incidents into this incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn merge_incidents(&self, id: &str, body: MergeIncidentsBody) -> Result<MergeIncidentsResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(Praiya::serialize_payload(MergeIncidentsBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Remove notification subscriber
    ///
    /// Unsubscribes the matching Subscriber from Incident Status Update Notifications.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// ---
    pub async fn remove_incident_notification_subscriber(&self, id: &str) -> Result<(), Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update an incident
    ///
    /// Acknowledge, resolve, escalate or reassign an incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn update_incident(&self, id: &str, body: UpdateIncidentBody) -> Result<UpdateIncidentResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(Praiya::serialize_payload(UpdateIncidentBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update an alert
    ///
    /// Resolve an alert or associate an alert with a new parent incident.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// When a service sends an event to PagerDuty, an alert and corresponding incident is triggered in PagerDuty.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn update_incident_alert(&self, id: &str, alert_id: &str, body: UpdateIncidentAlertBody) -> Result<AlertsAlertIdBody, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&alert_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(Praiya::serialize_payload(UpdateIncidentAlertBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Manage alerts
    ///
    /// Resolve multiple alerts or associate them with different incidents.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved. An alert represents a digital signal that was emitted to PagerDuty by the monitoring systems that detected or identified the issue.
    /// 
    /// A maximum of 500 alerts may be updated at a time. If more than this number of alerts are given, the API will respond with status 413 (Request Entity Too Large).
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn update_incident_alerts(&self, id: &str, query_params: IncidentsUpdateIncidentAlertsParams, body: UpdateIncidentAlertsBody) -> Result<UpdateIncidentAlertsResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), IncidentsUpdateIncidentAlertsParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(Praiya::serialize_payload(UpdateIncidentAlertsBody)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Manage incidents
    ///
    /// Acknowledge, resolve, escalate or reassign one or more incidents.
    /// 
    /// An incident represents a problem or an issue that needs to be addressed and resolved.
    /// 
    /// A maximum of 500 incidents may be updated at a time. If more than this number of incidents are given, the API will respond with status 413 (Request Entity Too Large).
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#incidents)
    /// 
    /// 
    /// ---
    pub async fn update_incidents(&self, query_params: IncidentsUpdateIncidentsParams, body: UpdateIncidentsBody) -> Result<UpdateIncidentsResponse, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &self.path(), IncidentsUpdateIncidentsParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(Praiya::serialize_payload(UpdateIncidentsBody)?));


        self.client
            .process_into_value(req)
            .await
    }

}
