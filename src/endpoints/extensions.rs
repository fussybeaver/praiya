//! Method, error and parameter types for the Extensions endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct ExtensionsClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for ExtensionsCreateExtensionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for ExtensionsDeleteExtensionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for ExtensionsEnableExtensionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get an extension](Extensions::get_extension()) endpoint.
#[derive(Default, Serialize)]
pub struct ExtensionsGetExtensionParams<'req> {
    pub(crate) qs: String,
}

pub struct ExtensionsGetExtensionParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> ExtensionsGetExtensionParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for ExtensionsGetExtensionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List extensions](Extensions::list_extensions()) endpoint.
#[derive(Default, Serialize)]
pub struct ExtensionsListExtensionsParams<'req> {
    pub(crate) qs: String,
}

pub struct ExtensionsListExtensionsParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> ExtensionsListExtensionsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// The id of the extension object you want to filter by.
    pub fn extension_object_id(&mut self, extension_object_id: &'req str) -> &mut Self {
        self.qs.append_pair("extension_object_id", serde_urlencoded::to_string(extension_object_id));

        self
    }

    /// Filters the result, showing only the extensions whose name matches the query.
    pub fn query(&mut self, query: &'req str) -> &mut Self {
        self.qs.append_pair("query", serde_urlencoded::to_string(query));

        self
    }

    /// Filter the extensions by extension vendor id.
    pub fn extension_schema_id(&mut self, extension_schema_id: &'req str) -> &mut Self {
        self.qs.append_pair("extension_schema_id", serde_urlencoded::to_string(extension_schema_id));

        self
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for ExtensionsListExtensionsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for ExtensionsUpdateExtensionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl ExtensionsClient {
    /// ---
    ///
    /// # Create an extension
    ///
    /// Create a new Extension.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn create_extension(&self, body: Extension) -> Result<ExtensionsBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(Extension)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete an extension
    ///
    /// Delete an existing extension. 
    /// 
    /// Once the extension is deleted, it will not be accessible from the web UI and new incidents won't be able to be created for this extension.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn delete_extension(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Enable an extension
    ///
    /// Enable an extension that is temporarily disabled. (This API does not require a request body.)
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn enable_extension(&self, id: &str) -> Result<ExtensionsIdBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get an extension
    ///
    /// Get details about an existing extension.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn get_extension(&self, id: &str, query_params: ExtensionsGetExtensionParams) -> Result<ExtensionsBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), ExtensionsGetExtensionParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List extensions
    ///
    /// List existing extensions.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub fn list_extensions(&self, query_params: ExtensionsListExtensionsParams) -> impl Stream<Item = Result<Extension, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(ExtensionsListExtensionsParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<ExtensionsResponse, >
    }

    /// ---
    ///
    /// # Update an extension
    ///
    /// Update an existing extension.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn update_extension(&self, id: &str, body: Extension) -> Result<ExtensionsIdBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(Extension)?));


        self.client
            .process_into_value(req)
            .await
    }

}
