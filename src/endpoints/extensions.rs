//! Method, error and parameter types for the Extensions endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct ExtensionsClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}


/// Query parameters for the [Get an extension](Extensions::get_extension()) endpoint.
#[derive(Default, Serialize)]
pub struct ExtensionsGetExtensionParams {
    pub(crate) qs: String,
}

pub struct ExtensionsGetExtensionParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> ExtensionsGetExtensionParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }

    pub fn build(&mut self) -> ExtensionsGetExtensionParams {
        ExtensionsGetExtensionParams {
            qs: self.qs.finish(),
        }
    }
}

impl BaseOption for ExtensionsGetExtensionParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineListResponse20014 {
    pub offset: usize,
    pub more: bool,
    pub limit: usize,
    pub total: Option<u64>,
    pub inline20014: Vec<Extension>,
}

/// Query parameters for the [List extensions](Extensions::list_extensions()) endpoint.
#[derive(Default, Serialize)]
pub struct ExtensionsListExtensionsParams {
    pub(crate) qs: String,
}

pub struct ExtensionsListExtensionsParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> ExtensionsListExtensionsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// The id of the extension object you want to filter by.
    pub fn extension_object_id(&mut self, extension_object_id: &'req str) -> &mut Self {
        self.qs.append_pair("extension_object_id", &extension_object_id);

        self
    }

    /// Filters the result, showing only the extensions whose name matches the query.
    pub fn query(&mut self, query: &'req str) -> &mut Self {
        self.qs.append_pair("query", &query);

        self
    }

    /// Filter the extensions by extension vendor id.
    pub fn extension_schema_id(&mut self, extension_schema_id: &'req str) -> &mut Self {
        self.qs.append_pair("extension_schema_id", &extension_schema_id);

        self
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }

    pub fn build(&mut self) -> ExtensionsListExtensionsParams {
        ExtensionsListExtensionsParams {
            qs: self.qs.finish(),
        }
    }
}

impl BaseOption for ExtensionsListExtensionsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl ExtensionsClient {
    /// ---
    ///
    /// # Create an extension
    ///
    /// Create a new Extension.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn create_extension(&self, body: CreateExtension) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, "/extensions", "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, ExtensionsCreateExtensionResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Delete an extension
    ///
    /// Delete an existing extension. 
    /// 
    /// Once the extension is deleted, it will not be accessible from the web UI and new incidents won't be able to be created for this extension.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn delete_extension(&self, id: &str) -> Result<(), Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/extensions/{}", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value::<, ExtensionsDeleteExtensionResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Enable an extension
    ///
    /// Enable an extension that is temporarily disabled. (This API does not require a request body.)
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn enable_extension(&self, id: &str) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/extensions/{}/enable", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Body::empty());


        self.client
            .process_into_value::<, ExtensionsEnableExtensionResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Get an extension
    ///
    /// Get details about an existing extension.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn get_extension(&self, id: &str, query_params: ExtensionsGetExtensionParams) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/extensions/{}", &id), &ExtensionsGetExtensionParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, ExtensionsGetExtensionResponse>(req)
            .await
    }

    /// ---
    ///
    /// # List extensions
    ///
    /// List existing extensions.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub fn list_extensions(&self, query_params: ExtensionsListExtensionsParams) -> impl Stream<Item = Result<Extension, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(ExtensionsListExtensionsParamsBuilder::new().build()),
            path: String::from("/extensions"),
        };

        self.client
            .process_into_paginated_stream::<Extension, InlineListResponse20014>(
                base_request,
                PaginationQueryComponent {
                    offset: 0,
                    limit: DEFAULT_PAGERDUTY_API_LIMIT,
                },
            )
            .boxed()

    }

    /// ---
    ///
    /// # Update an extension
    ///
    /// Update an existing extension.
    /// 
    /// Extensions are representations of Extension Schema objects that are attached to Services.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#extensions)
    /// 
    /// 
    /// ---
    pub async fn update_extension(&self, id: &str, body: UpdateExtension) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/extensions/{}", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, ExtensionsUpdateExtensionResponse>(req)
            .await
    }

}
