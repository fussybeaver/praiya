//! Method, error and parameter types for the LogEntries endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct LogEntriesClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}


/// Query parameters for the [Get a log entry](LogEntries::get_log_entry()) endpoint.
#[derive(Default, Serialize)]
pub struct LogEntriesGetLogEntryParams {
    pub(crate) qs: String,
}

pub struct LogEntriesGetLogEntryParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> LogEntriesGetLogEntryParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Time zone in which dates in the result will be rendered.
    pub fn time_zone(&mut self, time_zone: &'req str) -> &mut Self {
        self.qs.append_pair("time_zone", &time_zone);

        self
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }

    pub fn build(&mut self) -> LogEntriesGetLogEntryParams {
        LogEntriesGetLogEntryParams {
            qs: self.qs.finish(),
        }
    }
}

impl BaseOption for LogEntriesGetLogEntryParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineListResponse20019 {
    pub offset: usize,
    pub more: bool,
    pub limit: usize,
    pub total: Option<u64>,
    pub inline20019: Vec<LogEntry>,
}

/// Query parameters for the [List log entries](LogEntries::list_log_entries()) endpoint.
#[derive(Default, Serialize)]
pub struct LogEntriesListLogEntriesParams {
    pub(crate) qs: String,
}

pub struct LogEntriesListLogEntriesParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> LogEntriesListLogEntriesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Time zone in which dates in the result will be rendered.
    pub fn time_zone(&mut self, time_zone: &'req str) -> &mut Self {
        self.qs.append_pair("time_zone", &time_zone);

        self
    }

    /// The start of the date range over which you want to search.
    pub fn since(&mut self, since: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("since", &serde_urlencoded::to_string(&since).unwrap_or_default());

        self
    }

    /// The end of the date range over which you want to search.
    pub fn until(&mut self, until: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("until", &serde_urlencoded::to_string(&until).unwrap_or_default());

        self
    }

    /// If `true`, will return a subset of log entries that show only the most important changes to the incident.
    pub fn is_overview(&mut self, is_overview: bool) -> &mut Self {
        self.qs.append_pair("is_overview", &serde_urlencoded::to_string(&is_overview).unwrap_or_default());

        self
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }

    pub fn build(&mut self) -> LogEntriesListLogEntriesParams {
        LogEntriesListLogEntriesParams {
            qs: self.qs.finish(),
        }
    }
}

impl BaseOption for LogEntriesListLogEntriesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl LogEntriesClient {
    /// ---
    ///
    /// # Get a log entry
    ///
    /// Get details for a specific incident log entry. This method provides additional information you can use to get at raw event data.
    /// 
    /// A log of all the events that happen to an Incident, and these are exposed as Log Entries.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#log-entries)
    /// 
    /// 
    /// ---
    pub async fn get_log_entry(&self, id: &str, query_params: LogEntriesGetLogEntryParams) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/log_entries/{}", &id), &LogEntriesGetLogEntryParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, LogEntriesGetLogEntryResponse>(req)
            .await
    }

    /// ---
    ///
    /// # List log entries
    ///
    /// List all of the incident log entries across the entire account.
    /// 
    /// A log of all the events that happen to an Incident, and these are exposed as Log Entries.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#log-entries)
    /// 
    /// 
    /// ---
    pub fn list_log_entries(&self, query_params: LogEntriesListLogEntriesParams) -> impl Stream<Item = Result<LogEntry, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(LogEntriesListLogEntriesParamsBuilder::new().build()),
            path: String::from("/log_entries"),
        };

        self.client
            .process_into_paginated_stream::<LogEntry, InlineListResponse20019>(
                base_request,
                PaginationQueryComponent {
                    offset: 0,
                    limit: DEFAULT_PAGERDUTY_API_LIMIT,
                },
            )
            .boxed()

    }

    /// ---
    ///
    /// # Update log entry channel information.
    ///
    /// Update an existing incident log entry channel.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#log-entries)
    /// 
    /// 
    /// ---
    pub async fn update_log_entry_channel(&self, id: &str, body: UpdateLogEntryChannel) -> Result<(), Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/log_entries/{}/channel", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, LogEntriesUpdateLogEntryChannelResponse>(req)
            .await
    }

}
