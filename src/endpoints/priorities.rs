//! Method, error and parameter types for the Priorities endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct PrioritiesClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct ListPrioritiesListResponse {
    pub offset: usize,
    pub more: bool,
    pub limit: usize,
    pub total: Option<u64>,
    pub list_priorities: Vec<Priority>, //pub slack_connections: Vec<SlackConnection>
}

/// Query parameters for the [List priorities](Priorities::list_priorities()) endpoint.
#[derive(Default, Serialize)]
pub struct PrioritiesListPrioritiesParams {
    pub(crate) qs: String,
}

pub struct PrioritiesListPrioritiesParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> PrioritiesListPrioritiesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}

impl BaseOption for PrioritiesListPrioritiesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl PrioritiesClient {
    /// ---
    ///
    /// # List priorities
    ///
    /// List existing priorities, in order (most to least severe).
    /// 
    /// A priority is a label representing the importance and impact of an incident. This feature is only available on Standard and Enterprise plans.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#priorities)
    /// 
    /// 
    /// ---
    pub fn list_priorities(&self, query_params: PrioritiesListPrioritiesParams) -> impl Stream<Item = Result<Priority, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(PrioritiesListPrioritiesParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<ListPrioritiesResponse, ListPrioritiesListResponse>(
                base_request,
                PaginationQueryComponent {
                    offset: 0,
                    limit: DEFAULT_PAGERDUTY_API_LIMIT,
                },
            )
            .boxed()

    }

}
