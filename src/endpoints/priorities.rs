//! Method, error and parameter types for the Priorities endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct PrioritiesClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}


/// Query parameters for the [List priorities](Priorities::list_priorities()) endpoint.
#[derive(Default, Serialize)]
pub struct PrioritiesListPrioritiesParams<'req> {
    pub(crate) qs: String,
}

pub struct PrioritiesListPrioritiesParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> PrioritiesListPrioritiesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}


impl BaseOption for PrioritiesListPrioritiesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl PrioritiesClient {
    /// ---
    ///
    /// # List priorities
    ///
    /// List existing priorities, in order (most to least severe).
    /// 
    /// A priority is a label representing the importance and impact of an incident. This feature is only available on Standard and Enterprise plans.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#priorities)
    /// 
    /// 
    /// ---
    pub fn list_priorities(&self, query_params: PrioritiesListPrioritiesParams) -> impl Stream<Item = Result<Priority, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(PrioritiesListPrioritiesParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<PrioritiesResponse, >
    }

}
