//! Method, error and parameter types for the OnCalls endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct OnCallsClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}



#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct ListOnCallsListResponse {
    pub offset: usize,
    pub more: bool,
    pub limit: usize,
    pub total: Option<u64>,
    pub list_on_calls: Vec<Oncall>, //pub slack_connections: Vec<SlackConnection>
}

/// Query parameters for the [List all of the on-calls](OnCalls::list_on_calls()) endpoint.
#[derive(Default, Serialize)]
pub struct OnCallsListOnCallsParams {
    pub(crate) qs: String,
}

pub struct OnCallsListOnCallsParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> OnCallsListOnCallsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Time zone in which dates in the result will be rendered.
    pub fn time_zone(&mut self, time_zone: &'req str) -> &mut Self {
        self.qs.append_pair("time_zone", &time_zone);

        self
    }

    /// Array of additional details to include.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", &item);
        }
        self
    }

    /// Filters the results, showing only on-calls for the specified user IDs.
    pub fn user_ids<I: IntoIterator<Item = &'req str>>(&mut self, user_ids: I) -> &mut Self {
        for item in user_ids {
            self.qs.append_pair("user_ids[]", &item);
        }
        self
    }

    /// Filters the results, showing only on-calls for the specified escalation policy IDs.
    pub fn escalation_policy_ids<I: IntoIterator<Item = &'req str>>(&mut self, escalation_policy_ids: I) -> &mut Self {
        for item in escalation_policy_ids {
            self.qs.append_pair("escalation_policy_ids[]", &item);
        }
        self
    }

    /// Filters the results, showing only on-calls for the specified schedule IDs. If `null` is provided in the array, it includes permanent on-calls due to direct user escalation targets.
    pub fn schedule_ids<I: IntoIterator<Item = &'req str>>(&mut self, schedule_ids: I) -> &mut Self {
        for item in schedule_ids {
            self.qs.append_pair("schedule_ids[]", &item);
        }
        self
    }

    /// The start of the time range over which you want to search. If an on-call period overlaps with the range, it will be included in the result. Defaults to current time. The search range cannot exceed 3 months.
    pub fn since(&mut self, since: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("since", &since);

        self
    }

    /// The end of the time range over which you want to search. If an on-call period overlaps with the range, it will be included in the result. Defaults to current time. The search range cannot exceed 3 months, and the `until` time cannot be before the `since` time.
    pub fn until(&mut self, until: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("until", &until);

        self
    }

    /// This will filter on-calls such that only the earliest on-call for each combination of escalation policy, escalation level, and user is returned. This is useful for determining when the \"next\" on-calls are for a given set of filters.
    pub fn earliest(&mut self, earliest: bool) -> &mut Self {
        self.qs.append_pair("earliest", &earliest);

        self
    }
}

impl BaseOption for OnCallsListOnCallsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl OnCallsClient {
    /// ---
    ///
    /// # List all of the on-calls
    ///
    /// List the on-call entries during a given time range.
    /// 
    /// An on-call represents a contiguous unit of time for which a User will be on call for a given Escalation Policy and Escalation Rules.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#on-calls)
    /// 
    /// 
    /// ---
    pub fn list_on_calls(&self, query_params: OnCallsListOnCallsParams) -> impl Stream<Item = Result<Oncall, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(OnCallsListOnCallsParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<ListOnCallsResponse, ListOnCallsListResponse>(
                base_request,
                PaginationQueryComponent {
                    offset: 0,
                    limit: DEFAULT_PAGERDUTY_API_LIMIT,
                },
            )
            .boxed()

    }

}
