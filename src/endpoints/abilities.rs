//! Method, error and parameter types for the Abilities endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct AbilitiesClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}



impl AbilitiesClient {
    /// ---
    ///
    /// # Test an ability
    ///
    /// Test whether your account has a given ability.
    /// 
    /// "Abilities" describes your account's capabilities by feature name. For example `"teams"`.
    /// 
    /// An ability may be available to your account based on things like your pricing plan or account state.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#abilities)
    /// 
    /// 
    /// ---
    pub async fn get_ability(&self, id: &str) -> Result<(), Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/abilities/{}", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, AbilitiesGetAbilityResponse>(req)
            .await
    }

    /// ---
    ///
    /// # List abilities
    ///
    /// List all of your account's abilities, by name.
    /// 
    /// "Abilities" describes your account's capabilities by feature name. For example `"teams"`.
    /// 
    /// An ability may be available to your account based on things like your pricing plan or account state.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#abilities)
    /// 
    /// 
    /// ---
    pub async fn list_abilities(&self) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, "/abilities", "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, AbilitiesListAbilitiesResponse>(req)
            .await
    }

}
