//! Method, error and parameter types for the Schedules endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct SchedulesClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}


/// Query parameters for the [Create a schedule](Schedules::create_schedule()) endpoint.
#[derive(Default, Serialize)]
pub struct SchedulesCreateScheduleParams<'req> {
    pub(crate) qs: String,
}

pub struct SchedulesCreateScheduleParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> SchedulesCreateScheduleParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow=true` is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:   - If you don't pass the `overflow=true` parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`. - If you do pass the `overflow=true` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`. 
    pub fn overflow(&mut self, overflow: bool) -> &mut Self {
        self.qs.append_pair("overflow", serde_urlencoded::to_string(overflow));

        self
    }
}


impl BaseOption for SchedulesCreateScheduleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for SchedulesCreateScheduleOverrideParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Preview a schedule](Schedules::create_schedule_preview()) endpoint.
#[derive(Default, Serialize)]
pub struct SchedulesCreateSchedulePreviewParams<'req> {
    pub(crate) qs: String,
}

pub struct SchedulesCreateSchedulePreviewParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> SchedulesCreateSchedulePreviewParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// The start of the date range over which you want to search.
    pub fn since(&mut self, since: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("since", serde_urlencoded::to_string(since));

        self
    }

    /// The end of the date range over which you want to search.
    pub fn until(&mut self, until: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("until", serde_urlencoded::to_string(until));

        self
    }

    /// Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow=true` is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:   - If you don't pass the `overflow=true` parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`. - If you do pass the `overflow=true` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`. 
    pub fn overflow(&mut self, overflow: bool) -> &mut Self {
        self.qs.append_pair("overflow", serde_urlencoded::to_string(overflow));

        self
    }
}


impl BaseOption for SchedulesCreateSchedulePreviewParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for SchedulesDeleteScheduleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for SchedulesDeleteScheduleOverrideParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get a schedule](Schedules::get_schedule()) endpoint.
#[derive(Default, Serialize)]
pub struct SchedulesGetScheduleParams<'req> {
    pub(crate) qs: String,
}

pub struct SchedulesGetScheduleParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> SchedulesGetScheduleParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Time zone in which dates in the result will be rendered.
    pub fn time_zone(&mut self, time_zone: &'req str) -> &mut Self {
        self.qs.append_pair("time_zone", serde_urlencoded::to_string(time_zone));

        self
    }

    /// The start of the date range over which you want to search.
    pub fn since(&mut self, since: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("since", serde_urlencoded::to_string(since));

        self
    }

    /// The end of the date range over which you want to search.
    pub fn until(&mut self, until: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("until", serde_urlencoded::to_string(until));

        self
    }
}


impl BaseOption for SchedulesGetScheduleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List overrides](Schedules::list_schedule_overrides()) endpoint.
#[derive(Default, Serialize)]
pub struct SchedulesListScheduleOverridesParams<'req> {
    pub(crate) qs: String,
}

pub struct SchedulesListScheduleOverridesParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> SchedulesListScheduleOverridesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// The start of the date range over which you want to search.
    pub fn since(&mut self, since: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("since", serde_urlencoded::to_string(since));

        self
    }

    /// The end of the date range over which you want to search.
    pub fn until(&mut self, until: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("until", serde_urlencoded::to_string(until));

        self
    }

    /// When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable.
    pub fn editable(&mut self, editable: bool) -> &mut Self {
        self.qs.append_pair("editable", serde_urlencoded::to_string(editable));

        self
    }

    /// Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow=true is passed. This parameter defaults to false.
    pub fn overflow(&mut self, overflow: bool) -> &mut Self {
        self.qs.append_pair("overflow", serde_urlencoded::to_string(overflow));

        self
    }
}


impl BaseOption for SchedulesListScheduleOverridesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List users on call.](Schedules::list_schedule_users()) endpoint.
#[derive(Default, Serialize)]
pub struct SchedulesListScheduleUsersParams<'req> {
    pub(crate) qs: String,
}

pub struct SchedulesListScheduleUsersParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> SchedulesListScheduleUsersParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// The start of the date range over which you want to search.
    pub fn since(&mut self, since: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("since", serde_urlencoded::to_string(since));

        self
    }

    /// The end of the date range over which you want to search.
    pub fn until(&mut self, until: chrono::DateTime<chrono::Utc>) -> &mut Self {
        self.qs.append_pair("until", serde_urlencoded::to_string(until));

        self
    }
}


impl BaseOption for SchedulesListScheduleUsersParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List schedules](Schedules::list_schedules()) endpoint.
#[derive(Default, Serialize)]
pub struct SchedulesListSchedulesParams<'req> {
    pub(crate) qs: String,
}

pub struct SchedulesListSchedulesParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> SchedulesListSchedulesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Filters the result, showing only the schedules whose name matches the query.
    pub fn query(&mut self, query: &'req str) -> &mut Self {
        self.qs.append_pair("query", serde_urlencoded::to_string(query));

        self
    }
}


impl BaseOption for SchedulesListSchedulesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for SchedulesListSchedulesAuditRecordsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Update a schedule](Schedules::update_schedule()) endpoint.
#[derive(Default, Serialize)]
pub struct SchedulesUpdateScheduleParams<'req> {
    pub(crate) qs: String,
}

pub struct SchedulesUpdateScheduleParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> SchedulesUpdateScheduleParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow=true` is passed. This parameter defaults to false. For instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:   - If you don't pass the `overflow=true` parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`. - If you do pass the `overflow=true` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`. 
    pub fn overflow(&mut self, overflow: bool) -> &mut Self {
        self.qs.append_pair("overflow", serde_urlencoded::to_string(overflow));

        self
    }
}


impl BaseOption for SchedulesUpdateScheduleParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl SchedulesClient {
    /// ---
    ///
    /// # Create a schedule
    ///
    /// Create a new on-call schedule.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub async fn create_schedule(&self, query_params: SchedulesCreateScheduleParams, body: Schedule) -> Result<SchedulesBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), SchedulesCreateScheduleParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(Schedule)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create an override
    ///
    /// Create an override for a specific user covering the specified time range. If you create an override on top of an existing one, the last created override will have priority.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub async fn create_schedule_override(&self, id: &str, body: ScheduleOverride) -> Result<IdOverridesBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(ScheduleOverride)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Preview a schedule
    ///
    /// Preview what an on-call schedule would look like without saving it.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub async fn create_schedule_preview(&self, query_params: SchedulesCreateSchedulePreviewParams, body: SchedulePreview) -> Result<SchedulesPreviewBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), SchedulesCreateSchedulePreviewParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(SchedulePreview)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a schedule
    ///
    /// Delete an on-call schedule.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub async fn delete_schedule(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete an override
    ///
    /// Remove an override. 
    /// 
    /// You cannot remove a past override. 
    /// 
    /// If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time. 
    /// 
    /// If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub async fn delete_schedule_override(&self, id: &str, override_id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&override_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a schedule
    ///
    /// Show detailed information about a schedule, including entries for each layer and sub-schedule.
    /// 
    /// ---
    pub async fn get_schedule(&self, id: &str, query_params: SchedulesGetScheduleParams) -> Result<SchedulesBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), SchedulesGetScheduleParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List overrides
    ///
    /// List overrides for a given time range.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub async fn list_schedule_overrides(&self, id: &str, query_params: SchedulesListScheduleOverridesParams) -> Result<ScheduleOverridesResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), SchedulesListScheduleOverridesParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List users on call.
    ///
    /// List all of the users on call in a given schedule for a given time range.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub async fn list_schedule_users(&self, id: &str, query_params: SchedulesListScheduleUsersParams) -> Result<ScheduleUsersResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), SchedulesListScheduleUsersParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List schedules
    ///
    /// List the on-call schedules.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub fn list_schedules(&self, query_params: SchedulesListSchedulesParams) -> impl Stream<Item = Result<Schedule, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(SchedulesListSchedulesParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<SchedulesResponse, >
    }

    /// ---
    ///
    /// # List audit records for a schedule
    ///
    /// The returned records are sorted by the `execution_time` from newest to oldest.
    /// 
    /// See [`Cursor-based pagination`](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#audit-record).
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint's interface is under development and subject to change. Do not use it in production systems.
    /// > Your request must set an X-EARLY-ACCESS header with value `audit-early-access` to acknowledge this.
    /// >
    /// > Audit records for schedules resource started in August 2020 and records may be purged while the API is in early access.
    /// 
    /// 
    /// ---
    pub async fn list_schedules_audit_records(&self, id: &str) -> Result<UsersAuditRecordsResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update a schedule
    ///
    /// Update an existing on-call schedule.
    /// 
    /// A Schedule determines the time periods that users are On-Call.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#schedules)
    /// 
    /// 
    /// ---
    pub async fn update_schedule(&self, id: &str, query_params: SchedulesUpdateScheduleParams, body: Schedule) -> Result<SchedulesIdBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), SchedulesUpdateScheduleParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(Schedule)?));


        self.client
            .process_into_value(req)
            .await
    }

}
