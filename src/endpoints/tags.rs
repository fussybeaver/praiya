//! Method, error and parameter types for the Tags endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct TagsClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for TagsCreateEntityTypeByIdChangeTagsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for TagsCreateTagsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for TagsDeleteTagParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get tags for entities](Tags::get_entity_type_by_id_tags()) endpoint.
#[derive(Default, Serialize)]
pub struct TagsGetEntityTypeByIdTagsParams<'req> {
    pub(crate) qs: String,
}

pub struct TagsGetEntityTypeByIdTagsParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> TagsGetEntityTypeByIdTagsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}


impl BaseOption for TagsGetEntityTypeByIdTagsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for TagsGetTagParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get connected entities](Tags::get_tags_by_entity_type()) endpoint.
#[derive(Default, Serialize)]
pub struct TagsGetTagsByEntityTypeParams<'req> {
    pub(crate) qs: String,
}

pub struct TagsGetTagsByEntityTypeParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> TagsGetTagsByEntityTypeParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }
}


impl BaseOption for TagsGetTagsByEntityTypeParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List tags](Tags::list_tags()) endpoint.
#[derive(Default, Serialize)]
pub struct TagsListTagsParams<'req> {
    pub(crate) qs: String,
}

pub struct TagsListTagsParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> TagsListTagsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Filters the result, showing only the tags whose labels match the query.
    pub fn query(&mut self, query: &'req str) -> &mut Self {
        self.qs.append_pair("query", serde_urlencoded::to_string(query));

        self
    }
}


impl BaseOption for TagsListTagsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl TagsClient {
    /// ---
    ///
    /// # Assign tags
    ///
    /// Assign existing or new tags.
    /// 
    /// A Tag is applied to EScalation Policies, Teams or Users and can be used to filter them.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#tags)
    /// 
    /// 
    /// ---
    pub async fn create_entity_type_by_id_change_tags(&self, entity_type: &str, id: &str, body: EntityTypeByIdChangeTags) -> Result<HashMap<String, Value>, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &entity_type&id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(EntityTypeByIdChangeTags)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Create a tag
    ///
    /// Create a Tag.
    /// 
    /// A Tag is applied to EScalation Policies, Teams or Users and can be used to filter them.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#tags)
    /// 
    /// 
    /// ---
    pub async fn create_tags(&self, body: Tags) -> Result<TagsBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(Tags)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete a tag
    ///
    /// Remove an existing Tag.
    /// 
    /// A Tag is applied to EScalation Policies, Teams or Users and can be used to filter them.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#tags)
    /// 
    /// 
    /// ---
    pub async fn delete_tag(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get tags for entities
    ///
    /// Get related tags for Users, Teams or Escalation Policies.
    /// 
    /// A Tag is applied to EScalation Policies, Teams or Users and can be used to filter them.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#tags)
    /// 
    /// 
    /// ---
    pub async fn get_entity_type_by_id_tags(&self, entity_type: &str, id: &str, query_params: TagsGetEntityTypeByIdTagsParams) -> Result<TagsResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &entity_type&id), TagsGetEntityTypeByIdTagsParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get a tag
    ///
    /// Get details about an existing Tag.
    /// 
    /// A Tag is applied to EScalation Policies, Teams or Users and can be used to filter them.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#tags)
    /// 
    /// 
    /// ---
    pub async fn get_tag(&self, id: &str) -> Result<TagsBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get connected entities
    ///
    /// Get related Users, Teams or Escalation Policies for the Tag.
    /// 
    /// A Tag is applied to EScalation Policies, Teams or Users and can be used to filter them.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#tags)
    /// 
    /// 
    /// ---
    pub async fn get_tags_by_entity_type(&self, id: &str, entity_type: &str, query_params: TagsGetTagsByEntityTypeParams) -> Result<GetTagsByEntityTypeResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id&entity_type), TagsGetTagsByEntityTypeParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List tags
    ///
    /// List all of your account's tags.
    /// 
    /// A Tag is applied to EScalation Policies, Teams or Users and can be used to filter them.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#tags)
    /// 
    /// 
    /// ---
    pub fn list_tags(&self, query_params: TagsListTagsParams) -> impl Stream<Item = Result<Tag, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(TagsListTagsParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<TagsResponse, >
    }

}
