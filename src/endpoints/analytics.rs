//! Method, error and parameter types for the Analytics endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct AnalyticsClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for AnalyticsGetAnalyticsIncidentsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for AnalyticsGetAnalyticsIncidentsByIdParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for AnalyticsGetAnalyticsMetricsIncidentsAllParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for AnalyticsGetAnalyticsMetricsIncidentsServiceParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for AnalyticsGetAnalyticsMetricsIncidentsTeamParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl AnalyticsClient {
    /// ---
    ///
    /// # Get raw data - multiple incidents
    ///
    /// Provides enriched incident data and metrics for multiple incidents.
    /// 
    /// Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, Sleep Hour Interruptions. Some metric definitions can be found in our knowledge base: https://support.pagerduty.com/docs/pagerduty-analytics
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// <!-- theme: info -->
    /// > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement.
    /// 
    /// 
    /// ---
    pub async fn get_analytics_incidents(&self, body: GetAnalyticsIncidents) -> Result<GetAnalyticsIncidentsResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(GetAnalyticsIncidents)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get raw data - single incident
    ///
    /// Provides enriched incident data and metrics for a single incident.
    /// 
    /// Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, Sleep Hour Interruptions. Some metric definitions can be found in our knowledge base: https://support.pagerduty.com/docs/pagerduty-analytics
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// 
    /// 
    /// ---
    pub async fn get_analytics_incidents_by_id(&self, id: &str) -> Result<AnalyticsRawIncident, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get aggregated incident data
    ///
    /// Provides aggregated enriched metrics for incidents.
    /// 
    /// The provided metrics are aggregated by day, week, month using the aggregate_unit parameter, or for the entire period if no aggregate_unit is provided.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// <!-- theme: info -->
    /// > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement.
    /// 
    /// 
    /// ---
    pub async fn get_analytics_metrics_incidents_all(&self, body: GetAnalyticsMetricsIncidentsAll) -> Result<GetAnalyticsMetricsIncidentsAllResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(GetAnalyticsMetricsIncidentsAll)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get aggregated service data
    ///
    /// Provides aggregated metrics for incidents aggregated into units of time by service.
    /// 
    /// Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, Sleep Hour Interruptions. Some metric definitions can be found in our knowledge base: https://support.pagerduty.com/docs/pagerduty-analytics
    /// Data can be aggregated by day, week or month in addition to by service, or provided just as a collection of aggregates for each service in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a 'range_start' timestamp.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// <!-- theme: info -->
    /// > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement.
    /// 
    /// 
    /// ---
    pub async fn get_analytics_metrics_incidents_service(&self, body: GetAnalyticsMetricsIncidentsService) -> Result<GetAnalyticsMetricsIncidentsServiceResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(GetAnalyticsMetricsIncidentsService)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get aggregated team data
    ///
    /// Provides aggregated metrics for incidents aggregated into units of time by team.
    /// 
    /// Example metrics include Seconds to Resolve, Seconds to Engage, Snoozed Seconds, Sleep Hour Interruptions. Some metric definitions can be found in our knowledge base: https://support.pagerduty.com/docs/pagerduty-analytics
    /// Data can be aggregated by day, week or month in addition to by team, or provided just as a collection of aggregates for each team in the dataset for the entire period.  If a unit is provided, each row in the returned dataset will include a 'range_start' timestamp.
    /// 
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint is in Early Access and may change at any time. You must pass in the X-EARLY-ACCESS header to access it.
    /// <!-- theme: info -->
    /// > A `team_ids` or `service_ids` filter is required for [user-level API keys](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or keys generated through an OAuth flow. Account-level API keys do not have this requirement.
    /// 
    /// 
    /// ---
    pub async fn get_analytics_metrics_incidents_team(&self, body: GetAnalyticsMetricsIncidentsTeam) -> Result<GetAnalyticsMetricsIncidentsTeamResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(GetAnalyticsMetricsIncidentsTeam)?));


        self.client
            .process_into_value(req)
            .await
    }

}
