//! Method, error and parameter types for the ServiceDependencies endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct ServiceDependenciesClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}



impl ServiceDependenciesClient {
    /// ---
    ///
    /// # Associate service dependencies
    ///
    /// Create new dependencies between two services.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn create_service_dependency(&self, body: CreateServiceDependency) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, "/service_dependencies/associate", "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, ServiceDependenciesCreateServiceDependencyResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Disassociate service dependencies
    ///
    /// Disassociate dependencies between two services.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn delete_service_dependency(&self, body: DeleteServiceDependency) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, "/service_dependencies/disassociate", "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, ServiceDependenciesDeleteServiceDependencyResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Get business service dependencies
    ///
    /// Get all immediate dependencies of any business service.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn get_business_service_service_dependencies(&self, id: &str) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/service_dependencies/business_services/{}", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, ServiceDependenciesGetBusinessServiceServiceDependenciesResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Get technical service dependencies
    ///
    /// Get all immediate dependencies of any technical service.
    /// Technical services are also known as `services`.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#services)
    /// 
    /// 
    /// ---
    pub async fn get_technical_service_service_dependencies(&self, id: &str) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/service_dependencies/technical_services/{}", &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, ServiceDependenciesGetTechnicalServiceServiceDependenciesResponse>(req)
            .await
    }

}
