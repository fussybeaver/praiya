//! Method, error and parameter types for the EscalationPolicies endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct EscalationPoliciesClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for EscalationPoliciesCreateEscalationPolicyParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for EscalationPoliciesDeleteEscalationPolicyParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [Get an escalation policy](EscalationPolicies::get_escalation_policy()) endpoint.
#[derive(Default, Serialize)]
pub struct EscalationPoliciesGetEscalationPolicyParams<'req> {
    pub(crate) qs: String,
}

pub struct EscalationPoliciesGetEscalationPolicyParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> EscalationPoliciesGetEscalationPolicyParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }
}


impl BaseOption for EscalationPoliciesGetEscalationPolicyParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}
/// Query parameters for the [List escalation policies](EscalationPolicies::list_escalation_policies()) endpoint.
#[derive(Default, Serialize)]
pub struct EscalationPoliciesListEscalationPoliciesParams<'req> {
    pub(crate) qs: String,
}

pub struct EscalationPoliciesListEscalationPoliciesParamsBuilder {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> EscalationPoliciesListEscalationPoliciesParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Filters the results, showing only the escalation policies whose names contain the query.
    pub fn query(&mut self, query: &'req str) -> &mut Self {
        self.qs.append_pair("query", serde_urlencoded::to_string(query));

        self
    }

    /// Filters the results, showing only escalation policies on which any of the users is a target.
    pub fn user_ids<I: IntoIterator<Item = &'req str>>(&mut self, user_ids: I) -> &mut Self {
        for item in user_ids {
            self.qs.append_pair("user_ids[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// An array of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.
    pub fn team_ids<I: IntoIterator<Item = &'req str>>(&mut self, team_ids: I) -> &mut Self {
        for item in team_ids {
            self.qs.append_pair("team_ids[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// Array of additional Models to include in response.
    pub fn include<I: IntoIterator<Item = &'req str>>(&mut self, include: I) -> &mut Self {
        for item in include {
            self.qs.append_pair("include[]", serde_urlencoded::to_string(item));
        }
        self
    }

    /// Used to specify the field you wish to sort the results on.
    pub fn sort_by(&mut self, sort_by: &'req str) -> &mut Self {
        self.qs.append_pair("sort_by", serde_urlencoded::to_string(sort_by));

        self
    }
}


impl BaseOption for EscalationPoliciesListEscalationPoliciesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for EscalationPoliciesListEscalationPolicyAuditRecordsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for EscalationPoliciesUpdateEscalationPolicyParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl EscalationPoliciesClient {
    /// ---
    ///
    /// # Create an escalation policy
    ///
    /// Creates a new escalation policy. At least one escalation rule must be provided.
    /// 
    /// Escalation policies define which user should be alerted at which time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#escalation-policies)
    /// 
    /// 
    /// ---
    pub async fn create_escalation_policy(&self, body: EscalationPolicy) -> Result<EscalationPoliciesBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(EscalationPolicy)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Delete an escalation policy
    ///
    /// Deletes an existing escalation policy and rules. The escalation policy must not be in use by any services.
    /// 
    /// Escalation policies define which user should be alerted at which time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#escalation-policies)
    /// 
    /// 
    /// ---
    pub async fn delete_escalation_policy(&self, id: &str) -> Result<(), Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get an escalation policy
    ///
    /// Get information about an existing escalation policy and its rules.
    /// 
    /// Escalation policies define which user should be alerted at which time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#escalation-policies)
    /// 
    /// 
    /// ---
    pub async fn get_escalation_policy(&self, id: &str, query_params: EscalationPoliciesGetEscalationPolicyParams) -> Result<EscalationPoliciesBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), EscalationPoliciesGetEscalationPolicyParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # List escalation policies
    ///
    /// List all of the existing escalation policies.
    /// 
    /// Escalation policies define which user should be alerted at which time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#escalation-policies)
    /// 
    /// 
    /// ---
    pub fn list_escalation_policies(&self, query_params: EscalationPoliciesListEscalationPoliciesParams) -> impl Stream<Item = Result<EscalationPolicy, Error>> + '_ {
        let base_request = BaseRequest {
            host: String::clone(&self.api_endpoint),
            method: Method::GET,
            options: Arc::new(EscalationPoliciesListEscalationPoliciesParamsBuilder::new().build()),
            path: self.path(),
        };

        self.client
            .process_into_paginated_stream::<EscalationPoliciesResponse, >
    }

    /// ---
    ///
    /// # List audit records for an escalation policy
    ///
    /// The returned records are sorted by the `execution_time` from newest to oldest.
    /// 
    /// See [`Cursor-based pagination`](https://developer.pagerduty.com/docs/rest-api-v2/pagination/) for instructions on how to paginate through the result set.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#audit-record).
    /// <!-- theme: warning -->
    /// > ### Early Access
    /// > This endpoint's interface is under development and subject to change. Do not use it in production systems.
    /// > Your request must set an X-EARLY-ACCESS header with value `audit-early-access` to acknowledge this.
    /// >
    /// > Audit records for escalation policies resource started in August 2020 and records may be purged while the API is in early access.
    /// 
    /// 
    /// ---
    pub async fn list_escalation_policy_audit_records(&self, id: &str) -> Result<UsersAuditRecordsResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Update an escalation policy
    ///
    /// Updates an existing escalation policy and rules.
    /// 
    /// Escalation policies define which user should be alerted at which time.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#escalation-policies)
    /// 
    /// 
    /// ---
    pub async fn update_escalation_policy(&self, id: &str, body: EscalationPolicy) -> Result<EscalationPoliciesIdBody, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Some(PagerDuty::serialize_payload(EscalationPolicy)?));


        self.client
            .process_into_value(req)
            .await
    }

}
