//! Method, error and parameter types for the SlackConnections endpoint.
#![allow(
    unused_imports,
)]
/* 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


use crate::{
    BaseOption, BaseRequest, Praiya, PaginatedResponse, PaginationQueryComponent,
    SingleResponse, SubSystem, DEFAULT_PAGERDUTY_API_LIMIT
};
use crate::errors::Error;
use crate::models::*;

use std::collections::HashMap;
use std::sync::Arc;

use futures_core::Stream;
use futures_util::stream::StreamExt;
use http::request::Builder;
use hyper::{Body, Method};
use serde::{Deserialize, Serialize};
use serde_json::value::Value;
use url::form_urlencoded;

pub struct SlackConnectionsClient {
    pub(crate) api_endpoint: String,
    pub(crate) workspace: String,
    pub(crate) client: Praiya,
}


/// Query parameters for the [List Slack Connections](SlackConnections::get_connections()) endpoint.
#[derive(Default, Serialize)]
pub struct SlackConnectionsGetConnectionsParams {
    pub(crate) qs: String,
}

pub struct SlackConnectionsGetConnectionsParamsBuilder<'req> {
    qs: form_urlencoded::Serializer<'req, String>,
}

impl<'req> SlackConnectionsGetConnectionsParamsBuilder<'req> {
    pub fn new() -> Self {
        Self {
            qs: form_urlencoded::Serializer::new(String::new())
        }
    }

    /// Set the maximum number of results matched by the query.
    pub fn limit(&mut self, limit: i32) -> &mut Self {
        self.qs.append_pair("limit", &serde_urlencoded::to_string(&limit).unwrap_or_default());

        self
    }

    /// The number of items to skip before starting to collect the result set.
    pub fn offset(&mut self, offset: i32) -> &mut Self {
        self.qs.append_pair("offset", &serde_urlencoded::to_string(&offset).unwrap_or_default());

        self
    }

    pub fn build(&mut self) -> SlackConnectionsGetConnectionsParams {
        SlackConnectionsGetConnectionsParams {
            qs: self.qs.finish(),
        }
    }
}

impl BaseOption for SlackConnectionsGetConnectionsParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
      let mut query = form_urlencoded::Serializer::new(self.qs.clone());
      query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl SlackConnectionsClient {
    /// ---
    ///
    /// # Create a Slack Connection
    ///
    /// Creates a Slack Connection
    /// 
    /// > ### Important
    /// >
    /// >  Make sure that your PagerDuty account is linked to your Slack workspace and your PagerDuty user is linked to your Slack user. You can do this on the Slack extension page in your PagerDuty account.
    /// 
    /// 
    /// ---
    pub async fn create_connection(&self, slack_team_id: &str, body: CreateConnection) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/workspaces/{}/connections", &slack_team_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, SlackConnectionsCreateConnectionResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Delete a Slack Connection
    ///
    /// Delete an existing Slack Connection.
    /// 
    /// ---
    pub async fn delete_connection(&self, slack_team_id: &str, connection_id: &str) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/workspaces/{}/connections/{}", &slack_team_id, &connection_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::DELETE),
            Body::empty());


        self.client
            .process_into_value::<, SlackConnectionsDeleteConnectionResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Get a Slack Connection
    ///
    /// Get details about an existing Slack Connection.
    /// 
    /// ---
    pub async fn get_connection(&self, slack_team_id: &str, connection_id: &str) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/workspaces/{}/connections/{}", &slack_team_id, &connection_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, SlackConnectionsGetConnectionResponse>(req)
            .await
    }

    /// ---
    ///
    /// # List Slack Connections
    ///
    /// Returns a list of Slack Connections.
    /// 
    /// ---
    pub async fn get_connections(&self, slack_team_id: &str, query_params: SlackConnectionsGetConnectionsParams) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/workspaces/{}/connections", &slack_team_id), &SlackConnectionsGetConnectionsParamsBuilder::new().build().qs)?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value::<, SlackConnectionsGetConnectionsResponse>(req)
            .await
    }

    /// ---
    ///
    /// # Update a Slack Connection
    ///
    /// Update an existing Slack Connection.
    /// 
    /// ---
    pub async fn update_connection(&self, slack_team_id: &str, connection_id: &str, body: UpdateConnection) -> Result<, Error> {
        let uri = Praiya::parse_url(&self.api_endpoint, &format!("/workspaces/{}/connections/{}", &slack_team_id, &connection_id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::PUT),
            Praiya::serialize_payload(body)?);


        self.client
            .process_into_value::<, SlackConnectionsUpdateConnectionResponse>(req)
            .await
    }

}
