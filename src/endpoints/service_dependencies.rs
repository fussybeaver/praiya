//! Method, error and parameter types for the ServiceDependencies endpoint.
#![allow(
    unused_imports,
)]
/* 
 * PagerDuty API
 *
 * This document describes the PagerDuty REST APIs.  For guides and examples please visit our [Documentation.](https://developer.pagerduty.com/docs/get-started/getting-started/)  Our REST APIs are defined in OpenAPI v3.x. You can view the schema at [github.com/PagerDuty/api-schema](https://github.com/PagerDuty/api-schema). 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@pagerduty.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use serde::Deserialize;

use crate::models::*;

use std::collections::HashMap;
use serde_json::value::Value;

pub struct ServiceDependenciesClient {
    pub(crate) api_endpoint: String,
    pub(crate) client: PagerDuty,
}



impl BaseOption for ServiceDependenciesCreateServiceDependencyParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for ServiceDependenciesDeleteServiceDependencyParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for ServiceDependenciesGetBusinessServiceServiceDependenciesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl BaseOption for ServiceDependenciesGetTechnicalServiceServiceDependenciesParams {
    fn build_paginated_query_string(&self, pagination: PaginationQueryComponent) -> String {
        let mut query = form_urlencoded::Serializer::new(form_urlencoded::Serializer::Clone(&self.qs))
        query.append_pair("offset", &pagination.offset.to_string());
        query.append_pair("offset", &pagination.limit.to_string());
        query.finish()
    }
}

impl ServiceDependenciesClient {
    /// ---
    ///
    /// # Associate service dependencies
    ///
    /// Create new dependencies between two services.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn create_service_dependency(&self, body: ServiceDependency) -> Result<GetTechnicalServiceServiceDependenciesResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(ServiceDependency)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Disassociate service dependencies
    ///
    /// Disassociate dependencies between two services.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn delete_service_dependency(&self, body: DeleteServiceDependency) -> Result<GetTechnicalServiceServiceDependenciesResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, &self.path(), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::POST),
            Some(PagerDuty::serialize_payload(DeleteServiceDependency)?));


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get business service dependencies
    ///
    /// Get all immediate dependencies of any business service.
    /// 
    /// Business services model capabilities that span multiple technical services and that may be owned by several different teams.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#business-services)
    /// 
    /// 
    /// ---
    pub async fn get_business_service_service_dependencies(&self, id: &str) -> Result<GetBusinessServiceServiceDependenciesResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

    /// ---
    ///
    /// # Get technical service dependencies
    ///
    /// Get all immediate dependencies of any technical service.
    /// Technical services are also known as `services`.
    /// 
    /// For more information see the [API Concepts Document](../../docs/CONCEPTS.md#services)
    /// 
    /// 
    /// ---
    pub async fn get_technical_service_service_dependencies(&self, id: &str) -> Result<GetTechnicalServiceServiceDependenciesResponse, Error> {
        let uri = PagerDuty::parse_url(&self.api_endpoint, format!("{}/{}", &self.path(), &id), "")?;
            
        let req = self.client.build_request(
            uri,
            Builder::new().method(Method::GET),
            Body::empty());


        self.client
            .process_into_value(req)
            .await
    }

}
